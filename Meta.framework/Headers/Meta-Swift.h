// Generated by Apple Swift version 4.1.2 (swiftlang-902.0.54 clang-902.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ARKit;
@import AVFoundation;
@import UIKit;
@import Foundation;
@import CoreGraphics;
@import ObjectiveC;
@import SceneKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Meta",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif





@class UICollectionView;
@class UICollectionViewLayout;

SWIFT_PROTOCOL("_TtP4Meta40CHTCollectionViewDelegateWaterfallLayout_")
@protocol CHTCollectionViewDelegateWaterfallLayout <UICollectionViewDelegate>
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@optional
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout heightForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout columnCountForSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end

@class NSCoder;
@class UICollectionViewLayoutAttributes;

SWIFT_CLASS("_TtC4Meta32CHTCollectionViewWaterfallLayout")
@interface CHTCollectionViewWaterfallLayout : UICollectionViewLayout
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareLayout;
@property (nonatomic, readonly) CGSize collectionViewContentSize;
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewLayoutAttributes * _Nonnull)layoutAttributesForSupplementaryViewOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC4Meta14ExperienceView")
@interface ExperienceView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end









enum MetaLogLevel : NSInteger;
@class MetaConfigurationObject;
@class MetaExperience;

/// Class for creating and presenting Metaverse experiences.
/// Follow the following steps to present a Metaverse experience using this
/// framework.
/// <ol>
///   <li>
///     Retrieve your API key from https://studio.gometa.io/sdk/keys
///   </li>
///   <li>
///     Use your API key to initialize Meta in your ApplicationDelegate by calling:
///     <code>Meta.configure(withKey: "API_KEY")</code> in
///     <code>application(didFinishLaunchingWithOptions:)</code>
///   </li>
///   <li>
///     Create a <code>MetaExperience</code> object with the ID of the experience you want to
///     load: <code>var experience = MetaExperience(id: "EXPERIENCE_ID")</code>
///   </li>
///   <li>
///     (optional) Set the delegate of the experience if you want to be notified
///     when the experience is closed: <code>experience.delegate = self</code>
///   </li>
///   <li>
///     Present the experience: <code>Meta.shared.present(experience: experience)</code>
///   </li>
/// </ol>
/// Please report any errors, issues, or suggestions via Github issues.
SWIFT_CLASS("_TtC4Meta4Meta")
@interface Meta : NSObject
/// Reference to the shared instance of the framework
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Meta * _Nonnull shared;)
+ (Meta * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Set the log level of the framework
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum MetaLogLevel logLevel;)
+ (enum MetaLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum MetaLogLevel)newValue;
/// Set whether experience is being presenting fullscreen or in a view
@property (nonatomic) BOOL isFullscreen;
/// Return whether or not ARKit is supported on the current device
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL arKitIsSupported;)
+ (BOOL)arKitIsSupported SWIFT_WARN_UNUSED_RESULT;
/// Start off with an empty configuration object that we’ll mutate later
@property (nonatomic, strong) MetaConfigurationObject * _Nonnull configuration;
/// Initializes the framework with your API key. Ideally, this should be done
/// in your application delegate.
/// You can find your API key by logging into Metaverse Studio and navigating
/// to https://studio.gometa.io/sdk/keys
/// When you are ready to launch your app, you will need to request a
/// production API key by emailing support@gometa.io
/// Attempting to load an experience without first initializing this
/// configuration object will crash the framework.
/// \param withKey Your API key
///
+ (void)configureWithKey:(NSString * _Nonnull)key;
/// Identify a user using some unique piece of information known by your
/// application. For instance, if your app requires accounts, you can invoke
/// this method at the time of sign in and provide your user ID as the argument
/// (or, if you require unique usernames, the username; or another piece of
/// information like phone number or email address) to create a persistent
/// Metaverse account linked to their user profile within your app.
/// Identifying users allows you to do things like save and track user
/// properties across experiences, and to give and request items from users’
/// inventories.
/// This method only needs to be invoked once. It writes the user’s
/// identification key to your app’s UserDefaults, and references it when
/// loading subsequent experiences.
/// Note that, at this time, if you are unable to identify a user, or choose
/// not to, all Metaverse “activity” within your app will appear to be coming
/// from the account associated with your API key. This is fine for testing,
/// but might lead to collisions and weird things when dealing with items
/// and user properties in production. We recommend at least identifying a
/// user with a randomly generated UUID.
/// \param user The piece of unique data to use to identify this user.
/// This can be any unique string, like a UUID, username, or phone number.
///
- (void)identifyWithUser:(NSString * _Nonnull)id;
/// If your user’s token changes and you want to preserve their Metaverse
/// session, this method allows you to update their token without creating
/// a new session.
/// \param oldUser The old token used to identify the user
///
/// \param newUser The new token that should be used to identify the
/// user in the future
///
- (void)mergeIdentitiesWithOldUser:(NSString * _Nonnull)old newUser:(NSString * _Nonnull)new_;
/// Present a Metaverse experience. Metaverse experiences are presented on the
/// application’s current UIWindow, and removed from that window when they are
/// completed or closed. You should not draw, or attempt to draw, content above
/// the experience view.
/// \param experience The Metaverse experience object
///
- (void)presentWithExperience:(MetaExperience * _Nonnull)experience;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Framework configuration object
SWIFT_CLASS("_TtC4Meta23MetaConfigurationObject")
@interface MetaConfigurationObject : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol MetaExperienceDelegate;

/// Struct representing an experience to load. This struct is passed to
/// Meta.shared.present(experience:) to present an experience.
SWIFT_CLASS("_TtC4Meta14MetaExperience")
@interface MetaExperience : NSObject
@property (nonatomic, readonly, strong) UIView * _Nonnull view;
/// The MetaExperienceDelegate that receives experience events
@property (nonatomic, weak) id <MetaExperienceDelegate> _Nullable delegate;
/// Initialize a new experience to load by its ID. The experience ID is a uuid
/// that can be found when viewing an experience in Metaverse Studio (e.g., for
/// an experience with the URL <code>https://studio.gometa.io/discover/me/cff4fbc6-f489-4781-a1db-03e37069b206</code>,
/// <code>cff4fbc6-f489-4781-a1db-03e37069b206</code> is the experience ID.
/// Note that, at this time, you CAN NOT use experience short URLs
/// (https://mtvrs.io/TriangularFlippantHorse) to load experiences.
/// \param id The ID of the experience to load
///
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id enablePrefetching:(BOOL)enablePrefetching;
- (void)loadWithId:(NSString * _Nonnull)id enablePrefetching:(BOOL)enablePrefetching;
- (void)willAppear;
- (void)willDisappear;
- (void)willPresent;
@end

/// Reason why the experience closed
typedef SWIFT_ENUM(NSInteger, MetaExperienceCloseReason) {
/// There was a network error that caused the experience to exit
  MetaExperienceCloseReasonNetworkError = 0,
/// The user tapped the “close” button, or did not enable required
/// permissions
  MetaExperienceCloseReasonUserAction = 1,
/// The experience completed successfully
  MetaExperienceCloseReasonCompletion = 2,
/// The experience closed for an unspecified reason
  MetaExperienceCloseReasonUnknown = 3,
};


/// This protocol notifies your application of events relating to the current
/// experience.
SWIFT_PROTOCOL("_TtP4Meta22MetaExperienceDelegate_")
@protocol MetaExperienceDelegate
/// Experience did close.
/// \param reason The reason the experience was closed. See definition
/// for MetaExperienceCloseReason for possible values.
///
- (void)metaExperienceDidCloseWithReason:(enum MetaExperienceCloseReason)reason;
@end

/// Logging level. Default is error.
typedef SWIFT_ENUM(NSInteger, MetaLogLevel) {
/// Log all debugging information (camera focus events, draw events)
  MetaLogLevelDebug = 3,
/// Include things like network requests and transitions
  MetaLogLevelInfo = 2,
/// Log warnings
  MetaLogLevelWarn = 1,
/// Log errors. Errors soft-crash the framework and exit.
  MetaLogLevelError = 0,
};

/// Rendering engine to use in experiences. Default is ARKit, unless it is not
/// supported by the device. You can set this via <code>Meta.settings.setPreferredRenderingEngine(engine:)</code>
typedef SWIFT_ENUM(NSInteger, MetaRenderingEngine) {
/// Use ARKit, if available, to render experiences (default, preferred)
  MetaRenderingEngineArKit = 0,
/// Use a legacy renderer based on device sensors to render experiences. Use
/// this engine for older devices, or for situations where ARKit is not ideal,
/// such as driving, flying, etc.
  MetaRenderingEngineArSensor = 1,
};


/// Meta renderer settings
SWIFT_CLASS("_TtC4Meta12MetaSettings")
@interface MetaSettings : NSObject
/// Set the preferred rendering engine used in experiences. Note that if
/// the current device does not support ARKit, this value is ignored.
/// \param engine The desired rendering engine to use
///
+ (void)setPreferredRenderingEngineWithEngine:(enum MetaRenderingEngine)engine;
/// Get the preferred rendering engine used in experiences. Note that if
/// the current device does not support ARKit, any user preferece is
/// ignored.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum MetaRenderingEngine renderingEngine;)
+ (enum MetaRenderingEngine)renderingEngine SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
